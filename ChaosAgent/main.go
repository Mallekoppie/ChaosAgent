/*
 * contract Agent
 *
 * API is used to create load for other APIs
 *
 * API version: 1.0.0
 * Generated by: Swagger Codegen (https://github.com/swagger-api/swagger-codegen.git)
 */

package main

import (
	"log"
	"net"

	"mallekoppie/ChaosGenerator/ChaosAgent/service"

	"github.com/tkanos/gonfig"

	pb "mallekoppie/ChaosGenerator/contract"

	"google.golang.org/grpc"
	"google.golang.org/grpc/credentials"
	"google.golang.org/grpc/reflection"
)

func GetConfig() (ChaosAgentConfig, error) {
	configuration := ChaosAgentConfig{}
	err := gonfig.GetConf("ChaosAgentConfig.json", &configuration)

	if err != nil {
		log.Print("Error reading config file ChaosAgentConfig.json: %v", err)
		return configuration, err
	}

	return configuration, nil
}

func main() {

	config, configErr := GetConfig()

	if configErr != nil {
		log.Println("Unable to read config: ", configErr)

		return
	}

	log.Printf("Server started on Port: " + config.Port)

	listener, err := net.Listen("tcp", "0.0.0.0:"+config.Port)
	if err != nil {
		log.Println("Unable to listen on port: ", err.Error())
		return
	}

	creds, err := credentials.NewServerTLSFromFile("./chaos_agent.cer", "./chaos_agent.pkcs8")
	if err != nil {
		log.Println("Unable to load key pair: ", err.Error())
		return
	}

	server := grpc.NewServer(grpc.Creds(creds))

	pb.RegisterChaosAgentServer(server, &service.Service{})

	reflection.Register(server)

	log.Println("Server listening address: ", config.Port)

	if err = server.Serve(listener); err != nil {
		log.Fatalln("Failed to server: ", err.Error())
	}

}
