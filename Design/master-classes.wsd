@startuml

package Models {
    class TestGroup {
        int id
        string Name
        string Description
        TestCollection[] TestCollections
    }

    class Header {
        string Name
        string Value
    }

    class "Test"  {
        string Name
        string Method
        string Url
        string Body
        Header Headers
        int32 ResponseCode
        string ResponseBody
        
    }

    Test --* Header

    class TestCollection {
        string Name
        string Description
        Test[] Tests
        int GroupId
    }

    TestCollection --* Test

    TestGroup --* TestCollection

    class Agent {
        string AgentId
        string Host
        int Port
        bool Enabled
        string Status
    }

    class ServiceConfig {
        string GrafanaUrl
        string PrometheusUrl
        string IdpUrl
        string IdpClientId
        string MongoDBHost
        string MongoDBName
        string MongoDBPort
        string MongoDBUsername
        string MongoDBPassword
    }


}

package Repositories {
    class TestRepository {
        TestGroup[] GetTestGroups()
        void AddTestGroup(TestGroup)
        void DeleteTestGroup()
        Test[] GetTests(GroupId)
        Test[] GetAllTests()
        void AddTest(Test)
        void UpdateTest(Test)
        void DeleteTest(Test)
    }

    class ConfigRepository {        
        ServiceConfig GetServiceConfig()
    }

    class AgentRepository {
        void RegisterAgent(host, port)
        Agent[] GetAgents()
        void AddAgent()
        void DeleteAgent()
        void UpdateAgent()
    }
}

package Interface {
    class ChaosMasterApi {

    }
}

package Logic {
    class AgentManager {
        void StartTest(Test)
        void deployTest(Test)
        void DeleteTests()
        void StopAllTests()
        void StopTestOnOneAgent(agendId)
        void UpdateAgentParameters()

    }

    note as NAgentManager
        All interactions from Master service to Agent is managed here
    end note

    NAgentManager .. AgentManager

    class ConsulManager {
        void AddAgent()
        void RemoveAgent()
        GetAllAgents()
    }

    note as NConsul
        All interaction with Consul
        So that we can manipulate the registrations from the UI
    end note 

    NConsul .. ConsulManager
}



@enduml