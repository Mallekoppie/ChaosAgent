/*
 * Chaos Agent
 *
 * API is used to create load for other APIs
 *
 * API version: 1.0.0
 * Generated by: Swagger Codegen (https://github.com/swagger-api/swagger-codegen.git)
 */

package swagger

import (
	"encoding/json"
	"io/ioutil"
	"log"
	"net/http"
)

func AddTests(w http.ResponseWriter, r *http.Request) {

	if r.Method != http.MethodPut {
		w.WriteHeader(http.StatusMethodNotAllowed)
		log.Println("Invalid method used:", r.Method)
		return
	}

	config := TestCollection{}
	data, err := ioutil.ReadAll(r.Body)
	defer r.Body.Close()

	if err != nil {
		log.Println("Error reading body:", err)

		w.WriteHeader(http.StatusBadRequest)
		return
	}

	marshallError := json.Unmarshal(data, &config)

	if marshallError != nil {
		log.Println("Unable to unmarshall body:", marshallError)
		w.WriteHeader(http.StatusBadRequest)
		return
	}

	WriteTestConfiguration(config)

	w.WriteHeader(http.StatusOK)
}

func GetTestStatus(w http.ResponseWriter, r *http.Request) {
	w.Header().Set("Content-Type", "application/json; charset=UTF-8")

	status := CoreGetTestStatus()

	data, marshalErr := json.Marshal(status)

	if marshalErr != nil {
		log.Fatalln("Unable to marshal response", marshalErr)
		w.WriteHeader(http.StatusInternalServerError)
	}

	w.WriteHeader(http.StatusOK)
	_, err := w.Write(data)

	if err != nil {
		log.Fatalln("Error writing response stream:", err)
		return
	}
}

func IsAlive(w http.ResponseWriter, r *http.Request) {
	w.Header().Set("Content-Type", "application/json; charset=UTF-8")
	w.WriteHeader(http.StatusOK)
}

func StartTestRun(w http.ResponseWriter, r *http.Request) {

	if r.Method != http.MethodPost {
		w.WriteHeader(http.StatusMethodNotAllowed)
		log.Println("Invalid method used:", r.Method)
		return
	}

	params := TestParameters{}
	data, err := ioutil.ReadAll(r.Body)

	if err != nil {
		w.WriteHeader(http.StatusBadRequest)
		log.Println("Unable to read request body: ", err)
	}

	marshalErr := json.Unmarshal(data, &params)

	if marshalErr != nil {
		w.WriteHeader(http.StatusBadRequest)
		log.Println("Unable to unmarshal request body: ", marshalErr)
	}

	started, startErr := CoreRunTest(params.TestCollectionName, int(params.SimulatedUsers))

	if startErr != nil {
		w.WriteHeader(http.StatusInternalServerError)
		log.Println("Unable to start test run: ", startErr)
		w.Write([]byte(startErr.Error()))

		return
	}

	if started == true {
		w.WriteHeader(http.StatusOK)
	} else {
		w.WriteHeader(http.StatusConflict)
	}

}

func StopTestRun(w http.ResponseWriter, r *http.Request) {
	if r.Method != http.MethodDelete {
		w.WriteHeader(http.StatusMethodNotAllowed)
		log.Println("Invalid method used:", r.Method)
		return
	}

	CoreStopTest()

	log.Println("Test stopping")
}

func UpdateTestRun(w http.ResponseWriter, r *http.Request) {
	if r.Method != http.MethodPost {
		w.WriteHeader(http.StatusMethodNotAllowed)
		log.Println("Invalid method used:", r.Method)
		return
	}

	params := TestParameters{}
	data, err := ioutil.ReadAll(r.Body)

	if err != nil {
		w.WriteHeader(http.StatusBadRequest)
		log.Println("Unable to read request body: ", err)
	}

	marshalErr := json.Unmarshal(data, &params)

	if marshalErr != nil {
		w.WriteHeader(http.StatusBadRequest)
		log.Println("Unable to unmarshal request body: ", marshalErr)
	}
}
